package com.pku.common;

/**
 * Created by zhaolizhen on 18-9-4.
 */

import java.util.*;

/**
 * Airbnb Online Assessment Paginate List
5
13
1,28,310.6,SF
4,5,204.1,SF
20,7,203.2,Oakland
6,8,202.2,SF
6,10,199.1,SF
1,16,190.4,SF
6,29,185.2,SF
7,20,180.1,SF
6,21,162.1,SF
2,18,161.2,SF
2,30,149.1,SF
3,76,146.2,SF
2,14,141.1,San Jose
 *  
 * Here is a sample input. It’s a list generated by user search.
 * (1,28,100.3,Paris) corresponds to (Host ID, List ID, Points, City).
 *  
 * 5 in the first row tells each page at most keeps 5 records.
 * 13 in the second row is the number of records in the list.
 *  
 * Please paginate the list for Airbnb by requirement:
 * 1. When possible, two records with same host ID shouldn’t be in a page.
 * 2. But if no more records with non-repetitive host ID can be found, fill up the page with the given input order (ordered by Points).
 *  
 * Expected output:
 * 1,28,310.6,SF
 * 4,5,204.1,SF
 * 20,7,203.2,Oakland
 * 6,8,202.2,SF
 * 7,20,180.1,SF
 *  
 * 6,10,199.1,SF
 * 1,16,190.4,SF
 * 2,18,161.2,SF
 * 3,76,146.2,SF
 * 6,29,185.2,SF -- 6 repeats in page bec no more unique host ID available
 *  
 * 6,21,162.1,SF
 * 2,30,149.1,SF
 * 2,14,141.1,San Jose
 */

/**
 Airbnb Online Assessment Paginate List
 5
 13
 1,28,310.6,SF
 4,5,204.1,SF
 20,7,203.2,Oakland
 6,8,202.2,SF
 6,10,199.1,SF
 1,16,190.4,SF
 6,29,185.2,SF
 7,20,180.1,SF
 6,21,162.1,SF
 2,18,161.2,SF
 2,30,149.1,SF
 3,76,146.2,SF
 2,14,141.1,San Jose

 Here is a sample input. It’s a list generated by user search.
 (1,28,100.3,Paris) corresponds to (Host ID, List ID, Points, City).

 5 in the first row tells each page at most keeps 5 records.
 13 in the second row is the number of records in the list.

 Please paginate the list for Airbnb by requirement:
 1. When possible, two records with same host ID shouldn’t be in a page.
 2. But if no more records with non-repetitive host ID can be found, fill up the page with the given input order (ordered by Points).

 Expected output:
 1,28,310.6,SF
 4,5,204.1,SF
 20,7,203.2,Oakland
 6,8,202.2,SF
 7,20,180.1,SF

 6,10,199.1,SF
 1,16,190.4,SF
 2,18,161.2,SF
 3,76,146.2,SF
 6,29,185.2,SF -- 6 repeats in page bec no more unique host ID available

 6,21,162.1,SF
 2,30,149.1,SF
 2,14,141.1,San Jose


 */
public class HostCrowding {



    public static void main(String args[]){
//        Solution solution=new Solution();
//        List<String>result=solution.paginate();
//        print(result);

        String array[]={
        "1,28,300.6,San Francisco",
                "4,5,209.1,San Francisco",
                "20,7,203.4,Oakland",
                "6,8,202.9,San Francisco",
                "6,10,199.8,San Francisco",
                "1,16,190.5,San Francisco",
                "6,29,185.3,San Francisco",
                "7,20,180.0,Oakland",
                "6,21,162.2,San Francisco",
                "2,18,161.7,San Jose",
                "2,30,149.8,San Jose",
                "3,76,146.7,San Francisco",
                "2,14,141.8,San Jose"};

        List<String>list=new ArrayList<String>();
        for(String s:array){
            list.add(s);
        }

        print(list);
        System.out.println("after");
        List<String>result=Solution2.paginate(5,list);
        print(result);

    }

    private static void print(List<String>result){
        for(String str:result){
            System.out.println(str);
        }
    }


    private static class Solution1{
        Scanner scanner=new Scanner(System.in);
        public List<String> paginate(){
            int pageNo=scanner.nextInt();
            int no=scanner.nextInt();
            List<String>input=new LinkedList<String>();
            scanner.nextLine();
            for(int i=0;i<no;i++){
                String line=scanner.nextLine();
                input.add(line);
            }

            List<String>result=new ArrayList<String>();

            while(!input.isEmpty()){

                if(input.size()<=pageNo){
                    result.addAll(input);
                    break;
                }

                List<String>resultUnitList=new ArrayList<String>(pageNo);
                getResult(resultUnitList, input, pageNo);
                int unitSize=resultUnitList.size();
                if(unitSize==pageNo){
                    result.addAll(resultUnitList);
                    result.add("");
                    continue;
                }

                int needSize=pageNo-unitSize;

                while(!input.isEmpty()){
                    getResult(resultUnitList,input,needSize);
                    unitSize=resultUnitList.size();
                    if(unitSize==pageNo){
                        result.addAll(resultUnitList);
                        result.add("");
                        break;
                    }
                    needSize=pageNo-unitSize;
                }
            }
            return result;
        }

        public void getResult(List<String>resultUnitList,List<String>input,int pageNo){
            if(0==pageNo){
                return;
            }
            Set<String>set=new HashSet<String>();
            for(Iterator<String>it=input.iterator();it.hasNext();){
                String line=it.next();
                String array[]=line.split(",");
                if(!set.contains(array[0])){
                    set.add(array[0]);
                    it.remove();
                    resultUnitList.add(line);
                }
                if(set.size()==pageNo){
                    break;
                }
            }
        }
    }


    private static class Solution{
        Scanner scanner=new Scanner(System.in);
        public List<String> paginate(){
            int pageNo=scanner.nextInt();
            int no=scanner.nextInt();
            List<String>input=new LinkedList<String>();
            scanner.nextLine();
            for(int i=0;i<no;i++){
                String line=scanner.nextLine();
                input.add(line);
            }

            List<String>result=new ArrayList<String>();

            while(!input.isEmpty()){
                Set<String>uniqIdSet=new HashSet<String>();
                List<String>unitIdList=new ArrayList<String>();
                for(Iterator<String>it=input.iterator();it.hasNext();){
                    if(unitIdList.size()==pageNo){
                        break;
                    }
                    String line=it.next();
                    String id=line.split(",")[0];
                    if(!uniqIdSet.contains(id)) {
                        uniqIdSet.add(id);
                        unitIdList.add(line);
                        it.remove();
                    }
                }

                if(unitIdList.size()==pageNo){
                    result.addAll(unitIdList);
                    result.add("");
                    continue;
                }

                for(Iterator<String>it=input.iterator();it.hasNext();){
                    if(unitIdList.size()==pageNo){
                        break;
                    }
                    unitIdList.add(it.next());
                    it.remove();
                }
                result.addAll(unitIdList);
                if(input.size()!=0) {
                    result.add("");
                }
            }
            return result;
        }

    }


    private static class Solution2{

        static List<String> paginate(int resultsPerPage, List<String> results) {

            //the final resultList
            List<String>resultList=new ArrayList<String>();

            if(resultsPerPage<=0||null==results||0==results.size()){
                return resultList;
            }

            while(!results.isEmpty()){
                Set<String>uniqIdSet=new HashSet<String>();//the uniq set which holds the uniq hostId
                List<String>unitIdList=new ArrayList<String>();
                for(Iterator<String>it=results.iterator();it.hasNext();){
                    if(unitIdList.size()==resultsPerPage){
                        break;
                    }
                    String line=it.next();
                    String id=line.split(",")[0];//get the hostId

                    if(!uniqIdSet.contains(id)) {
                        uniqIdSet.add(id);
                        unitIdList.add(line);
                        it.remove();
                    }
                }

                //if the first time can fill the Page then return
                if(unitIdList.size()==resultsPerPage){
                    resultList.addAll(unitIdList);
                    resultList.add("");
                    continue;
                }

                //get the left elements whith the remaining order
                for(Iterator<String>it=results.iterator();it.hasNext();){
                    if(unitIdList.size()==resultsPerPage){
                        break;
                    }
                    unitIdList.add(it.next());
                    it.remove();
                }
                resultList.addAll(unitIdList);

                //if it's not the last page,we should add the line separator
                if(results.size()!=0) {
                    resultList.add("");
                }
            }
            return resultList;
        }
    }
}
